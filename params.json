{"name":"Trema","body":"## Trema is a full-stack, easy-to-use framework for developing OpenFlow controllers in Ruby and C.\r\n\r\n\r\n“ I poked through Trema recently. It looks like a \\*great\\* project. Very clean. ”<br />\r\n***-Martin Casado, Nicira CTO***\r\n\r\n<br/>\r\n\r\n***\r\n\r\n\r\n### Install\r\n\r\nInstallation is very easy. Run gem install trema and straight away you have a working Trema installation.\r\n\r\n```\r\n$ gem install trema\r\n```\r\n\r\nIf you prefer manual installation, download .tgz or .zip from the link in the upper right corner and build it as follows:\r\n\r\n```\r\n$ tar xzvf trema-xyz.tar.gz\r\n$ ./trema-xyz/build.rb\r\n```\r\n\r\n\r\n### Writing Your Own Controller\r\n\r\nTrema OpenFlow Controller are simple Ruby scripts. Write your own OpenFlow controller by adding message handlers to your controller class just like Rails.\r\n\r\n```ruby\r\nclass MyController < Controller\r\n  def packet_in dpid, message  # packet_in message handler\r\n    ...\r\n  end\r\n\r\n  def features_reply dpid, message  # features_reply message handler\r\n    ...\r\n  end\r\n\r\n  ...\r\nend\r\n```\r\n\r\n\r\n### Running Your Controller\r\n\r\nYou can test your controller right away without compilation:\r\n\r\n```\r\n$ ./trema run mycontroller.rb\r\n```\r\n\r\nThis one simple `trema run` command enables the closed loop of _\"Coding, run, and debug\"_.\r\n\r\n\r\n### Network Emulator\r\n\r\nWith Trema network DSL, you can describe the network topology in which the controller is executed.\r\n\r\n```ruby\r\n# One virtual switch + two virtual hosts.\r\nvswitch { dpid \"0xabc\" }\r\nvhost \"host1\"\r\nvhost \"host2\"\r\nlink \"0xabc\", \"host1\"\r\nlink \"0xabc\", \"host2\"\r\n```\r\n\r\nThen you can pass the network configuration to trema run.\r\n\r\n```\r\n$ ./trema run mycontroller.rb -c network.conf\r\n```\r\n\r\n\r\n### Sample Code\r\n\r\n* [[trema]/src/examples/](https://github.com/trema/trema/tree/develop/src/examples) directory includes some simple samples demonstrating Trema API usage. They are good references for understanding both Ruby and C APIs.\r\n* [Trema Apps](https://github.com/trema/apps) repository includes practical/experimental controllers developed on top of Trema. It is a good starting point for developing real-world controllers.\r\n\r\n\r\n### Tutorials\r\n\r\n* [Trema in 10 Minutes](http://trema-10min.heroku.com/)\r\n* [Trema Tutorial](http://trema-tutorial.heroku.com/)\r\n* [Test-First OpenFlow Programming With Trema](http://testfirst-trema.heroku.com/)\r\n* [Programming Trema (in Japanese)](https://github.com/trema/Programming-Trema)\r\n\r\n\r\n### Meta\r\n\r\n* [README](https://github.com/trema/trema/blob/develop/README.md)\r\n* [Quick Start Guide](https://github.com/trema/trema/wiki/Quick-start)\r\n* [Ruby API documents](http://rubydoc.info/github/trema/trema/master/frames)\r\n* [Issue Tracker](https://github.com/trema/trema/issues)\r\n* [Mailing List](https://groups.google.com/group/trema-dev)\r\n* Twitter: [@trema_news](http://twitter.com/trema_news)","tagline":"Full-Stack OpenFlow Framework in Ruby and C","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}